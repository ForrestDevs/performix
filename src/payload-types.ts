/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    sessions: Session;
    accounts: Account;
    verifications: Verification;
    passkeys: Passkey;
    'admin-invitations': AdminInvitation;
    courses: Course;
    chapters: Chapter;
    lessons: Lesson;
    enrollments: Enrollment;
    progress: Progress;
    reviews: Review;
    media: Media;
    pages: Page;
    mentors: Mentor;
    students: Student;
    testimonials: Testimonial;
    articles: Article;
    'article-tags': ArticleTag;
    schools: School;
    blueprints: Blueprint;
    transactions: Transaction;
    plans: Plan;
    'payload-folders': FolderInterface;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    courses: {
      chapters: 'chapters';
      lessons: 'lessons';
    };
    chapters: {
      lessons: 'lessons';
      children: 'chapters';
    };
    'payload-folders': {
      documentsAndFolders: 'payload-folders' | 'media';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    sessions: SessionsSelect<false> | SessionsSelect<true>;
    accounts: AccountsSelect<false> | AccountsSelect<true>;
    verifications: VerificationsSelect<false> | VerificationsSelect<true>;
    passkeys: PasskeysSelect<false> | PasskeysSelect<true>;
    'admin-invitations': AdminInvitationsSelect<false> | AdminInvitationsSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    chapters: ChaptersSelect<false> | ChaptersSelect<true>;
    lessons: LessonsSelect<false> | LessonsSelect<true>;
    enrollments: EnrollmentsSelect<false> | EnrollmentsSelect<true>;
    progress: ProgressSelect<false> | ProgressSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    mentors: MentorsSelect<false> | MentorsSelect<true>;
    students: StudentsSelect<false> | StudentsSelect<true>;
    testimonials: TestimonialsSelect<false> | TestimonialsSelect<true>;
    articles: ArticlesSelect<false> | ArticlesSelect<true>;
    'article-tags': ArticleTagsSelect<false> | ArticleTagsSelect<true>;
    schools: SchoolsSelect<false> | SchoolsSelect<true>;
    blueprints: BlueprintsSelect<false> | BlueprintsSelect<true>;
    transactions: TransactionsSelect<false> | TransactionsSelect<true>;
    plans: PlansSelect<false> | PlansSelect<true>;
    'payload-folders': PayloadFoldersSelect<false> | PayloadFoldersSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  /**
   * Users chosen display name
   */
  name: string;
  /**
   * The email of the user
   */
  email: string;
  /**
   * Whether the email of the user has been verified
   */
  emailVerified: boolean;
  /**
   * The image of the user
   */
  image?: string | null;
  createdAt: string;
  updatedAt: string;
  /**
   * The normalized email of the user
   */
  normalizedEmail?: string | null;
  /**
   * The role of the user
   */
  role?: ('admin' | 'student' | 'mentor') | null;
  /**
   * Whether the user is banned from the platform
   */
  banned?: boolean | null;
  /**
   * The reason for the ban
   */
  banReason?: string | null;
  /**
   * The date and time when the ban will expire
   */
  banExpires?: string | null;
  /**
   * The Stripe customer ID of the user
   */
  stripeCustomerId?: string | null;
}
/**
 * Sessions are active sessions for users. They are used to authenticate users with a session token
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions".
 */
export interface Session {
  id: number;
  /**
   * The date and time when the session will expire
   */
  expiresAt: string;
  /**
   * The unique session token
   */
  token: string;
  createdAt: string;
  updatedAt: string;
  /**
   * The IP address of the device
   */
  ipAddress?: string | null;
  /**
   * The user agent information of the device
   */
  userAgent?: string | null;
  /**
   * The user that the session belongs to
   */
  user: number | User;
  /**
   * The admin who is impersonating this session
   */
  impersonatedBy?: (number | null) | User;
}
/**
 * Accounts are used to store user accounts for authentication providers
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accounts".
 */
export interface Account {
  id: number;
  /**
   * The id of the account as provided by the SSO or equal to userId for credential accounts
   */
  accountId: string;
  /**
   * The id of the provider as provided by the SSO
   */
  providerId: string;
  /**
   * The user that the account belongs to
   */
  user: number | User;
  /**
   * The access token of the account. Returned by the provider
   */
  accessToken?: string | null;
  /**
   * The refresh token of the account. Returned by the provider
   */
  refreshToken?: string | null;
  /**
   * The id token for the account. Returned by the provider
   */
  idToken?: string | null;
  /**
   * The date and time when the access token will expire
   */
  accessTokenExpiresAt?: string | null;
  /**
   * The date and time when the refresh token will expire
   */
  refreshTokenExpiresAt?: string | null;
  /**
   * The scope of the account. Returned by the provider
   */
  scope?: string | null;
  /**
   * The hashed password of the account. Mainly used for email and password authentication
   */
  password?: string | null;
  createdAt: string;
  updatedAt: string;
}
/**
 * Verifications are used to verify authentication requests
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verifications".
 */
export interface Verification {
  id: number;
  /**
   * The identifier of the verification request
   */
  identifier: string;
  /**
   * The value to be verified
   */
  value: string;
  /**
   * The date and time when the verification request will expire
   */
  expiresAt: string;
  createdAt: string;
  updatedAt: string;
}
/**
 * Passkeys are used to authenticate users
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "passkeys".
 */
export interface Passkey {
  id: number;
  /**
   * The name of the passkey
   */
  name?: string | null;
  /**
   * The public key of the passkey
   */
  publicKey: string;
  /**
   * The user that the passkey belongs to
   */
  user: number | User;
  /**
   * The unique identifier of the registered credential
   */
  credentialID: string;
  /**
   * The counter of the passkey
   */
  counter: number;
  /**
   * The type of device used to register the passkey
   */
  deviceType: string;
  /**
   * Whether the passkey is backed up
   */
  backedUp: boolean;
  /**
   * The transports used to register the passkey
   */
  transports: string;
  createdAt: string;
  aaguid?: string | null;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admin-invitations".
 */
export interface AdminInvitation {
  id: number;
  role: 'admin' | 'student' | 'mentor';
  token: string;
  url?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: number;
  slug?: string | null;
  slugLock?: boolean | null;
  status: 'draft' | 'published' | 'archived';
  title: string;
  /**
   * Upload a thumbnail for the course
   */
  thumbnail: number | Media;
  /**
   * A short description of the course
   */
  description?: string | null;
  /**
   * The content of the course
   */
  richText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  chapters?: {
    docs?: (number | Chapter)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  lessons?: {
    docs?: (number | Lesson)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  /**
   * If enabled, the course structure (chapters or lessons) will be visable
   */
  freePreview?: boolean | null;
  isPaid?: boolean | null;
  skipSync?: boolean | null;
  stripeProductId?: string | null;
  stripePriceId?: string | null;
  /**
   * The price of the course, leave 0 for free courses
   */
  price?: number | null;
  /**
   * The structure type of the course, flat or hierarchical. Flat is for courses with a single level of lessons, hierarchical is for courses with multiple levels of chapters and lessons within those chapters
   */
  structureType: 'flat' | 'hierarchical';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  prefix?: string | null;
  folder?: (number | null) | FolderInterface;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-folders".
 */
export interface FolderInterface {
  id: number;
  name: string;
  folder?: (number | null) | FolderInterface;
  documentsAndFolders?: {
    docs?: (
      | {
          relationTo?: 'payload-folders';
          value: number | FolderInterface;
        }
      | {
          relationTo?: 'media';
          value: number | Media;
        }
    )[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chapters".
 */
export interface Chapter {
  id: number;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * The full URL path for this chapter, computed from the parent chain (e.g.: course/chapter/subchapter).
   */
  fullSlug?: string | null;
  /**
   * The title of the chapter
   */
  title: string;
  /**
   * A short description of the chapter
   */
  description?: string | null;
  lessons?: {
    docs?: (number | Lesson)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  course: number | Course;
  /**
   * The parent chapter of this chapter.
   */
  parent?: (number | null) | Chapter;
  /**
   * Indicates if the chapter is a leaf (i.e. has no children).
   */
  isLeaf?: boolean | null;
  children?: {
    docs?: (number | Chapter)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Lessons are the individual units of content within a chapter or course.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons".
 */
export interface Lesson {
  id: number;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * The title of the lesson
   */
  title: string;
  /**
   * The description of the lesson
   */
  description?: string | null;
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * The downloads for the lesson
   */
  downloads?: (number | Media)[] | null;
  videos?:
    | {
        title: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  /**
   * The order of the lesson in the chapter/course
   */
  order: number;
  course: number | Course;
  chapter?: (number | null) | Chapter;
  isPreview?: boolean | null;
  /**
   * Estimated duration in minutes
   */
  estimatedDuration?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments".
 */
export interface Enrollment {
  id: number;
  user: number | User;
  type: 'course' | 'blueprint' | 'plan';
  enrolledCourse?: (number | null) | Course;
  enrolledBlueprint?: (number | null) | Blueprint;
  enrolledPlan?: (number | null) | Plan;
  status: 'active' | 'refunded';
  updatedAt: string;
  createdAt: string;
}
/**
 * Blueprints are a collection of resources.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blueprints".
 */
export interface Blueprint {
  id: number;
  slug?: string | null;
  slugLock?: boolean | null;
  title?: string | null;
  /**
   * Upload a thumbnail for the blueprint
   */
  thumbnail?: (number | null) | Media;
  /**
   * A short description of the blueprint
   */
  description?: string | null;
  /**
   * The content of the blueprint
   */
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Upload files to the blueprint (PDF, DOCX, Images)
   */
  files?: (number | Media)[] | null;
  /**
   * Add videos to the blueprint (YouTube, Vimeo, etc.)
   */
  videos?:
    | {
        title?: string | null;
        url?: string | null;
        id?: string | null;
      }[]
    | null;
  isPaid?: boolean | null;
  skipSync?: boolean | null;
  stripeProductId?: string | null;
  stripePriceId?: string | null;
  price?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plans".
 */
export interface Plan {
  id: number;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * The title of the plan
   */
  title?: string | null;
  /**
   * The description of the plan
   */
  description?: string | null;
  /**
   * Whether the plan is the most popular
   */
  mostPopular?: boolean | null;
  /**
   * The thumbnail of the plan
   */
  thumbnail?: (number | null) | Media;
  /**
   * Who the plan is best for
   */
  bestFor?: string | null;
  /**
   * What the plan includes
   */
  includes?:
    | {
        item?: string | null;
        id?: string | null;
      }[]
    | null;
  skipSync?: boolean | null;
  stripeProductId?: string | null;
  stripePriceId?: string | null;
  price?: number | null;
  period?: ('monthly' | 'yearly') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "progress".
 */
export interface Progress {
  id: number;
  enrollment: number | Enrollment;
  lesson: number | Lesson;
  status: 'not_started' | 'in_progress' | 'completed';
  completion_date?: string | null;
  last_accessed?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: number;
  course: number | Course;
  user: number | User;
  rating: number;
  content: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?: {
              relationTo: 'pages';
              value: number | Page;
            } | null;
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (number | null) | Media;
  };
  layout: (CallToActionBlock | ContentBlock | MediaBlock)[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mentors".
 */
export interface Mentor {
  id: number;
  slug?: string | null;
  slugLock?: boolean | null;
  name: string;
  /**
   * The short intro that goes in the mentor card and at the top of the profile. (Perferably written in the third person).
   */
  intro: string;
  /**
   * The bio is a longer description of the mentor and can be written in the first person.
   */
  bio?: string | null;
  location: string;
  age?: number | null;
  /**
   * Upload/ Select a profile picture for the mentor
   */
  avatar?: (number | null) | Media;
  currentTeam?: string | null;
  position?: ('forward' | 'defence' | 'goalie') | null;
  levelOfPlay?: ('d1' | 'pro' | 'usports') | null;
  school?: (number | null) | School;
  sports?: ('hockey' | 'soccer' | 'baseball' | 'basketball' | 'volleyball')[] | null;
  featured: boolean;
  socials?: {
    eliteProspects?: string | null;
    instagram?: string | null;
  };
  skills?:
    | (
        | 'defensive-awareness'
        | 'defending-the-rush'
        | 'offensive-production'
        | 'breaking-out'
        | 'winning-battles'
        | 'playmaking'
        | 'skating-ability'
        | 'puck-handling'
        | 'reaction-speed'
        | 'agility'
        | 'physicality'
        | 'goal-scoring'
        | 'speed'
        | 'wallplay'
        | 'stickhandling'
        | 'hockey-iq'
        | 'teamwork'
        | 'leadership'
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "schools".
 */
export interface School {
  id: number;
  name: string;
  logo: number | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "students".
 */
export interface Student {
  id: number;
  user: number | User;
  /**
   * First name of the student
   */
  firstName: string;
  /**
   * Last name of the student
   */
  lastName: string;
  /**
   * Phone number
   */
  phone?: string | null;
  /**
   * Birth date of the student
   */
  birthDate: string;
  /**
   * Current level of play
   */
  currentLevel: string;
  /**
   * Primary position
   */
  position: 'forward' | 'defence' | 'goalie';
  /**
   * Current team name
   */
  currentTeam: string;
  /**
   * Personal goals and aspirations
   */
  goals?: string | null;
  /**
   * Personal biography
   */
  bio?: string | null;
  /**
   * Whether the student has completed their profile setup
   */
  profileCompleted?: boolean | null;
  /**
   * Whether this profile is a parent of another student
   */
  isParent?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials".
 */
export interface Testimonial {
  id: number;
  name?: string | null;
  message?: string | null;
  image?: (number | null) | Media;
  team?: string | null;
  position?: string | null;
  featured?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Blog posts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "articles".
 */
export interface Article {
  id: number;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (number | Article)[] | null;
  tags?: (number | ArticleTag)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "article-tags".
 */
export interface ArticleTag {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions".
 */
export interface Transaction {
  id: number;
  user: number | User;
  product: (
    | {
        relationTo: 'blueprints';
        value: number | Blueprint;
      }
    | {
        relationTo: 'courses';
        value: number | Course;
      }
    | {
        relationTo: 'plans';
        value: number | Plan;
      }
  )[];
  type: 'blueprint' | 'course' | 'plan';
  /**
   * Amount in USD (not cents)
   */
  total: number;
  /**
   * Transaction currency
   */
  currency?: string | null;
  status: 'pending' | 'completed' | 'failed' | 'refunded';
  /**
   * Stripe checkout session ID or payment intent ID
   */
  stripePaymentId?: string | null;
  /**
   * Stripe customer ID for this transaction
   */
  stripeCustomerId?: string | null;
  /**
   * Stripe client secret for this transaction
   */
  stripeClientSecret?: string | null;
  /**
   * Date and time when the transaction will expire
   */
  expiresAt?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'sessions';
        value: number | Session;
      } | null)
    | ({
        relationTo: 'accounts';
        value: number | Account;
      } | null)
    | ({
        relationTo: 'verifications';
        value: number | Verification;
      } | null)
    | ({
        relationTo: 'passkeys';
        value: number | Passkey;
      } | null)
    | ({
        relationTo: 'admin-invitations';
        value: number | AdminInvitation;
      } | null)
    | ({
        relationTo: 'courses';
        value: number | Course;
      } | null)
    | ({
        relationTo: 'chapters';
        value: number | Chapter;
      } | null)
    | ({
        relationTo: 'lessons';
        value: number | Lesson;
      } | null)
    | ({
        relationTo: 'enrollments';
        value: number | Enrollment;
      } | null)
    | ({
        relationTo: 'progress';
        value: number | Progress;
      } | null)
    | ({
        relationTo: 'reviews';
        value: number | Review;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'mentors';
        value: number | Mentor;
      } | null)
    | ({
        relationTo: 'students';
        value: number | Student;
      } | null)
    | ({
        relationTo: 'testimonials';
        value: number | Testimonial;
      } | null)
    | ({
        relationTo: 'articles';
        value: number | Article;
      } | null)
    | ({
        relationTo: 'article-tags';
        value: number | ArticleTag;
      } | null)
    | ({
        relationTo: 'schools';
        value: number | School;
      } | null)
    | ({
        relationTo: 'blueprints';
        value: number | Blueprint;
      } | null)
    | ({
        relationTo: 'transactions';
        value: number | Transaction;
      } | null)
    | ({
        relationTo: 'plans';
        value: number | Plan;
      } | null)
    | ({
        relationTo: 'payload-folders';
        value: number | FolderInterface;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  email?: T;
  emailVerified?: T;
  image?: T;
  createdAt?: T;
  updatedAt?: T;
  normalizedEmail?: T;
  role?: T;
  banned?: T;
  banReason?: T;
  banExpires?: T;
  stripeCustomerId?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions_select".
 */
export interface SessionsSelect<T extends boolean = true> {
  expiresAt?: T;
  token?: T;
  createdAt?: T;
  updatedAt?: T;
  ipAddress?: T;
  userAgent?: T;
  user?: T;
  impersonatedBy?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accounts_select".
 */
export interface AccountsSelect<T extends boolean = true> {
  accountId?: T;
  providerId?: T;
  user?: T;
  accessToken?: T;
  refreshToken?: T;
  idToken?: T;
  accessTokenExpiresAt?: T;
  refreshTokenExpiresAt?: T;
  scope?: T;
  password?: T;
  createdAt?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verifications_select".
 */
export interface VerificationsSelect<T extends boolean = true> {
  identifier?: T;
  value?: T;
  expiresAt?: T;
  createdAt?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "passkeys_select".
 */
export interface PasskeysSelect<T extends boolean = true> {
  name?: T;
  publicKey?: T;
  user?: T;
  credentialID?: T;
  counter?: T;
  deviceType?: T;
  backedUp?: T;
  transports?: T;
  createdAt?: T;
  aaguid?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admin-invitations_select".
 */
export interface AdminInvitationsSelect<T extends boolean = true> {
  role?: T;
  token?: T;
  url?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  status?: T;
  title?: T;
  thumbnail?: T;
  description?: T;
  richText?: T;
  chapters?: T;
  lessons?: T;
  freePreview?: T;
  isPaid?: T;
  skipSync?: T;
  stripeProductId?: T;
  stripePriceId?: T;
  price?: T;
  structureType?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chapters_select".
 */
export interface ChaptersSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  fullSlug?: T;
  title?: T;
  description?: T;
  lessons?: T;
  course?: T;
  parent?: T;
  isLeaf?: T;
  children?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons_select".
 */
export interface LessonsSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  title?: T;
  description?: T;
  richText?: T;
  downloads?: T;
  videos?:
    | T
    | {
        title?: T;
        url?: T;
        id?: T;
      };
  order?: T;
  course?: T;
  chapter?: T;
  isPreview?: T;
  estimatedDuration?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments_select".
 */
export interface EnrollmentsSelect<T extends boolean = true> {
  user?: T;
  type?: T;
  enrolledCourse?: T;
  enrolledBlueprint?: T;
  enrolledPlan?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "progress_select".
 */
export interface ProgressSelect<T extends boolean = true> {
  enrollment?: T;
  lesson?: T;
  status?: T;
  completion_date?: T;
  last_accessed?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  course?: T;
  user?: T;
  rating?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  prefix?: T;
  folder?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mentors_select".
 */
export interface MentorsSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  name?: T;
  intro?: T;
  bio?: T;
  location?: T;
  age?: T;
  avatar?: T;
  currentTeam?: T;
  position?: T;
  levelOfPlay?: T;
  school?: T;
  sports?: T;
  featured?: T;
  socials?:
    | T
    | {
        eliteProspects?: T;
        instagram?: T;
      };
  skills?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "students_select".
 */
export interface StudentsSelect<T extends boolean = true> {
  user?: T;
  firstName?: T;
  lastName?: T;
  phone?: T;
  birthDate?: T;
  currentLevel?: T;
  position?: T;
  currentTeam?: T;
  goals?: T;
  bio?: T;
  profileCompleted?: T;
  isParent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  name?: T;
  message?: T;
  image?: T;
  team?: T;
  position?: T;
  featured?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "articles_select".
 */
export interface ArticlesSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  relatedPosts?: T;
  tags?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "article-tags_select".
 */
export interface ArticleTagsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "schools_select".
 */
export interface SchoolsSelect<T extends boolean = true> {
  name?: T;
  logo?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blueprints_select".
 */
export interface BlueprintsSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  title?: T;
  thumbnail?: T;
  description?: T;
  richText?: T;
  files?: T;
  videos?:
    | T
    | {
        title?: T;
        url?: T;
        id?: T;
      };
  isPaid?: T;
  skipSync?: T;
  stripeProductId?: T;
  stripePriceId?: T;
  price?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions_select".
 */
export interface TransactionsSelect<T extends boolean = true> {
  user?: T;
  product?: T;
  type?: T;
  total?: T;
  currency?: T;
  status?: T;
  stripePaymentId?: T;
  stripeCustomerId?: T;
  stripeClientSecret?: T;
  expiresAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plans_select".
 */
export interface PlansSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  title?: T;
  description?: T;
  mostPopular?: T;
  thumbnail?: T;
  bestFor?: T;
  includes?:
    | T
    | {
        item?: T;
        id?: T;
      };
  skipSync?: T;
  stripeProductId?: T;
  stripePriceId?: T;
  price?: T;
  period?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-folders_select".
 */
export interface PayloadFoldersSelect<T extends boolean = true> {
  name?: T;
  folder?: T;
  documentsAndFolders?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}